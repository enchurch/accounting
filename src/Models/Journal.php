<?php

namespace Scottlaurent\Accounting\Models;

use Illuminate\Database\Eloquent\Model;
use Money\Money;
use Money\Currency;
use Carbon\Carbon;

/**
 * Class Journal
 * @package Scottlaurent\Accounting
 * @property    Money                  $balance
 * @property    string                 $currency
 * @property    Carbon                 $updated_at
 * @property    Carbon                 $post_date
 * @property    Carbon                 $created_at
 */
class Journal extends Model
{
	
    /**
     * @var array
     */
    protected $dates = [
        'deleted_at',
        'updated_at'
    ];


    private $journalTransactionClass;

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->journalTransactionClass = config('accounting.models.journal_transaction');
    }


    /**
     * @internal Journal $journal
     */
    protected static function boot()
    {
        static::created(function (Journal $journal) {
            $journal->resetCurrentBalances();
        });

        parent::boot();
    }


    /**
     * Magically create get{whatever}Dollars() methods
     *
     * @param string $key
     * @return mixed
     */
    public function __call($method, $parameters)
    {
        $newMethod = preg_replace('/(get.*)Dollars(Today|On)?/', '$1$2', $method);
        if ($newMethod != $method) {
            // call the root method to get the value in Money
            $money = call_user_func_array([$this, $newMethod], $parameters);
            // return Dollars
            return $this->inDollars($money);
        }
        $newMethod = preg_replace('/(debit|credit)Dollars/', '$1', $method);
        if ($newMethod != $method) {
            // first parameter is amount, turn into int and pass it on
            $parameters[0] = (int) ($parameters[0] * 100);
            return  call_user_func_array([$this, $newMethod], $parameters);
        }

        return parent::__call($method, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * Turn a Money into a float| int line 1.95
     * @param Money $money
     * @return float|int
     */
    private function inDollars(Money $money) {
        return $money->getAmount() / 100;
    }

    /**
     * Sets the default currency, used for each transaction.
     * initJournal() in Traits default this to USD
     * @param string $currency
     */
    public function setCurrency($currency)
    {
        $this->currency = $currency;
    }



	/**
	 * @param Ledger $ledger
	 * @return Journal
	 */
	public function assignToLedger(Ledger $ledger)
	{
		$ledger->journals()->save($this);
		return $this;
	}
	
	
	/**
	 * Recalculate and set the balance
	 */
	public function resetCurrentBalances()
	{
		$this->balance = $this->getBalance();
		$this->save();
	}



    /**
     * Get the balance of the journal.  This "could" include future dates.
     * @return Money
     */
    public function getBalance()
    {
        $balance = $this->transactions()->sum('credit') - $this->transactions()->sum('debit');
        return new Money($balance, new Currency($this->currency));
    }

    /**
     * Get the balance of the journal as of right now, excluding future transactions.
     * @return Money
     */
    public function getCurrentBalance()
    {
        return $this->getBalanceOn(Carbon::now());
    }

    /**
	 * Get the balance of the journal based on a given date.
	 * @param Carbon $date
	 * @return Money
	 */
	public function getBalanceOn(Carbon $date)
	{
		return $this->getCreditBalanceOn($date)->subtract($this->getDebitBalanceOn($date));
	}


	/**
	 * Get the debit only balance of the journal based on a given date.
	 * @param Carbon $date
	 * @return Money
	 */
	public function getDebitBalanceOn(Carbon $date)
	{
		$balance = $this->transactions()->where('post_date', '<=', $date)->sum('debit') ?: 0;
		return new Money($balance, new Currency($this->currency));

	}

    /**
     * Calculate the amount debited to a journal today
     * @return Money
     */
    public function getDebitedToday()
    {
        $today = Carbon::now();
        return $this->getDebitedOn($today);
    }

    /**
     * Calculate the amount debited to a journal on a given day
     * @param Carbon $date
     * @return Money
     */
    public function getDebitedOn(Carbon $date) {
        $amount = $this
                ->transactions()
                ->whereBetween('post_date', [
                    $date->copy()->startOfDay(),
                    $date->copy()->endOfDay()
                ])
                ->sum('debit');
        return new Money($amount, new Currency($this->currency));
    }

    /**
	 * Get the credit only balance of the journal based on a given date.
	 * @param Carbon $date
	 * @return Money
	 */
	public function getCreditBalanceOn(Carbon $date)
	{
		$balance = $this->transactions()->where('post_date', '<=', $date)->sum('credit') ?: 0;
		return new Money($balance, new Currency($this->currency));
	}

    /**
     * Calculate the amount credited to a journal today
     * @return Money
     */
    public function getCreditedToday()
    {
        $today = Carbon::now();
        return $this->getCreditedOn($today);
    }

    /**
     * Calculate the amount credited to a journal on a given day
     * @param Carbon $date
     * @return Money
     */
    public function getCreditedOn(Carbon $date) {
        $amount = $this
                ->transactions()
                ->whereBetween('post_date', [
                    $date->copy()->startOfDay(),
                    $date->copy()->endOfDay()
                ])
                ->sum('credit');
        return new Money($amount, new Currency($this->currency));
    }


    /**
	 * @param $value
	 * @param null $memo
	 * @param null $post_date
	 * @return JournalTransaction
	 */
	public function credit($value,$memo=null,$post_date=null, $transaction_group = null)
	{
		$value = is_a($value,Money::class)
			? $value
			: new Money($value, new Currency($this->currency));
		return $this->post($value,null,$memo,$post_date, $transaction_group);
	}


    /**
	 * @param $value
	 * @param null $memo
	 * @param null $post_date
	 * @return JournalTransaction
	 */
	public function debit($value,$memo=null,$post_date=null, $transaction_group=null)
	{
		$value = is_a($value,Money::class)
			? $value
			: new Money($value, new Currency($this->currency));
		return $this->post(null,$value,$memo,$post_date, $transaction_group);
	}


    /**
     * @param Money $credit
     * @param Money $debit
     * @param $memo
     * @param Carbon $post_date
     * @param null $transaction_group
     * @return JournalTransaction
     */
	private function post(Money $credit = null, Money $debit=null, $memo=null, $post_date = null, $transaction_group = null) {

		$transaction = new $this->journalTransactionClass();
		$transaction->credit = $credit ? $credit->getAmount() : null;
		$transaction->debit = $debit ? $debit->getAmount() : null;
		$currency_code = $credit
			? $credit->getCurrency()->getCode()
			: $debit->getCurrency()->getCode();
		$transaction->memo = $memo;
		$transaction->currency = $currency_code;
		$transaction->post_date = $post_date ?: Carbon::now();
		$transaction->transaction_group = $transaction_group;
		$this->transactions()->save($transaction);
		return $transaction;
	}
	


    /**===================================================
     * Laravel Attributes
     *===================================================*/

    /**
     * @param $value
     * @return Money
     */
    public function getBalanceAttribute($value) {
        return new Money($value, new Currency($this->currency));
    }

    /**
     * @param $value
     */
    public function setBalanceAttribute($value) {
        $value = is_a($value,Money::class)
            ? $value
            : new Money($value, new Currency($this->currency));
        $this->attributes['balance'] = $value ? (int) $value->getAmount() : null;
    }


    /**===================================================
     * Relationships
     *===================================================*/

    /**
     * Get all of the morphed models.
     */
    public function morphed()
    {
        return $this->morphTo();
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function ledger()
    {
        return $this->belongsTo(config('accounting.models.ledger'));
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function transactions()
    {
        return $this->hasMany(config('accounting.models.journal_transaction'));
    }


}
